name: "AlexNet-Generalist"



layer {
  name: "data"
  type: "MapData"
  top: "data"
  top: "label"
  top: "meta_label" 
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "../data/cifar100_mean.binaryproto"
    mirror: true
  }
  data_param {
    source: "/PATH_TO_Data/train_lmdb"  ## path to lmdb cifar100, update to your path 
    batch_size: 100
    backend: LMDB
    labels_map_file: "../data/random10_labels_mapping.txt"
   
  }
}


layer {
  name: "data"
  type: "MapData"
  top: "data"
  top: "label"
  top: "meta_label" 
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "../data/cifar100_mean.binaryproto"
  }
  data_param {
    source: "/PATH_TO_Data/train_lmdb_copy"  ## if tetsting on training data (in Generalist only), use another copy of lmdb as lock created on the first training lmdb
    batch_size: 100
    backend: LMDB
    labels_map_file: "../data/random10_labels_mapping.txt"
   
  }
}



# Silence label only in TRAIN phase, because its not used.
# if used remove this silence 
layer {
	name: "sil"
	type: "Silence"
	bottom: "label"
	include {
      phase: TRAIN
   }
}


layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    norm_region: WITHIN_CHANNEL
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    norm_region: WITHIN_CHANNEL
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
    decay_mult: 250
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}


# compares fc8 to meta_label. 
# label: = real_labels, just for readin inside solver
layer {
  name: "prediction"
  type: "MapPrediction"
  bottom: "ip1"
  bottom: "label"
  bottom: "meta_label"
  top: "prediction"
  include {
    phase: TEST
  }
}


layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "meta_label"
  top: "loss"
}
