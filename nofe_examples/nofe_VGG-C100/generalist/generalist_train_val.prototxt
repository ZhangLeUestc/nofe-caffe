name: "VGG11-Generalist"



layer {
  name: "data"
  type: "MapData"
  top: "data"
  top: "label"
  top: "meta_label" 
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/ironfs/scratch/karim/caffe-lib/data/cifar100/cifar100_pad4zero_mean.binaryproto"
	mirror: true
 	crop_size: 32
  }
  data_param {
    source: "/home/ifs-users/karim/cifar100_main_real/train_pad4zero_lmdb"
    batch_size: 128
    backend: LMDB
    labels_map_file: "data/random10_labels_mapping.txt"
   
  }
}


layer {
  name: "data"
  type: "SelectMapImageData"
  top: "data"
  top: "label"
  top: "meta_label" 
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "/home/ironfs/scratch/karim/caffe-lib/data/cifar100/cifar100_mean.binaryproto"

	
  }
  select_map_image_data_param {
    source: "/home/ironfs/scratch/karim/caffe-lib/data/cifar100/main_real_train.txt"
    batch_size: 100
	shuffle: true
    labels_map_file: "data/random10_labels_mapping.txt"
    selected_dataset_size: 10000
  }
}



# Silence label only in TRAIN phase, because its not used.
# if used remove this silence 
layer {
	name: "sil"
	type: "Silence"
	bottom: "label"
	include {
      phase: TRAIN
   }
}


######### Stack 1 [2X conv3X3,64 ] ###############
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
  
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
  
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}



######### Stack 2 [2 layers:  conv3X3,128 ] ###############
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
 param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
 convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
     weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
  
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
 param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
 convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
     weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
  
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}



######### Stack 3 [4 layers:  conv3X3, 256] ###############
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
 param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
  
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
  
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
  
}
layer {
  name: "conv3_4"
  type: "Convolution"
  bottom: "conv3_3"
  top: "conv3_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu3_4"
  type: "ReLU"
  bottom: "conv3_4"
  top: "conv3_4"
  
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_4"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}





############ FC Layers ##########
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 2
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
   weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_fc1"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
  
}
layer {
  name: "drop_fc1"
  type: "Dropout"
  bottom: "fc1"
  top: "fc1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

## lasyer fc2
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 2
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
   weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu_fc2"
  type: "ReLU"
  bottom: "fc2"
  top: "fc2"
  
}
layer {
  name: "drop_fc2"
  type: "Dropout"
  bottom: "fc2"
  top: "fc2"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3"
  param {
    lr_mult: 1
    decay_mult: 1  #250
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"

    }
    bias_filler {
      type: "constant"
    }
  }

}



# compares fc8 to meta_label. 
# label: = real_labels, just for readin inside solver
layer {
  name: "prediction"
  type: "MapPrediction"
  bottom: "fc3"
  bottom: "label"
  bottom: "meta_label"
  top: "prediction"
  include {
    phase: TEST
  }
}


layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc3"
  bottom: "meta_label"
  top: "loss"
}
